import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import socketIoClient from 'socket.io-client';
import { Socket } from 'socket.io';
import { DefaultEventsMap } from 'socket.io/dist/typed-events';

const Chat: NextPage = () => {
  const socketClient = socketIoClient();
  const [message, setMessage] = useState<string>();
  const [messageList, setMessageList] = useState<string[]>([])

  useEffect(() => {
    fetchAll();
  
    return () => {
      socketClient.disconnect()
    }
  }, [])

  const fetchAll = async (): Promise<void> => {
    try {
      await fetch('/api/chats/socketio');

      socketClient.on('connect', () => {
        console.log('Socket client part connect')
      });

      socketClient.on('user connect', () => {
        console.log('user has connected, socket id is :: ', socketClient.id)
      })

      socketClient.on('receive data', (message) => {
        console.log('receive data has occured :: ', message)
        setMessageList(prev => [
          ...prev,
          message
        ])
      })

      socketClient.on('receive message', (message) => {
        console.log('receive data has occured :: ', message)
        setMessageList(prev => [
          ...prev,
          message
        ])
      })

      socketClient.on('disconnect', () => {
        console.log('Socket client part disconnect')
      })
    } catch (error) {
      alert(error);
    }
  }

  const onClickSendMessage = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {
    e.preventDefault();

    socketClient.emit('send message', {clientId: socketClient.id, message: message});
  }

  const onChangeMessage = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setMessage(e.target.value);
  }
  

  return <div className={styles.container}>
  <Head>
    <title>Create Next App</title>
    <meta name="description" content="Generated by create next app" />
    <link rel="icon" href="/favicon.ico" />
  </Head>
  Routing :: Chat<br />
  <input type="text" onChange={onChangeMessage} />
  <button onClick={onClickSendMessage}>Send message</button>
  <br />
  {messageList.map((message, index) => <p key={index}>{message}</p>)}
</div>
}

export default Chat